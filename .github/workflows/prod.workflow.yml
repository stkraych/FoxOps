name: Deploy to production

on:
  workflow_run:
    workflows: ["Create backend"]
    types:
      - completed
jobs:
  Build:
    environment: Production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Build and run Parcel in the background
        run: |
          nohup npx parcel build src/index.html > /dev/null 2>&1 &
          echo $! > .pidfile

  Test:
    runs-on: ubuntu-latest
    environment: Production
    needs: Build
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Install jest
        run: npm install --save-dev jest
      - name: Run  Jest test
        run: npm test
      - name: Super-linter
        uses: super-linter/super-linter@v5.7.2
        env:
          DISABLE_ERRORS: true
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

  Format:
    runs-on: ubuntu-latest
    environment: Production
    needs: [Build, Test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          persist-credentials: false
      - name: Prettify code
        uses: creyD/prettier_action@v4.3
        with:
          prettier_options: --write **/*.{js,md}
          only_changed: True
          github_token: ${{ secrets.MY_TOKEN }}

  Security:
    runs-on: ubuntu-latest
    needs: [Build, Test, Format]
    environment: Production
    steps:
      - name: Snyk
        uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - name: Scan for smells and vulnerabilities with SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Container:
    runs-on: ubuntu-latest
    needs: [Build, Test, Format, Security]
    environment: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push in private registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }}
      - name: Scnan DockerHub registry Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Compose
        run: sudo apt install -y docker-compose
      - name: Build and Run Docker Compose
        run: |
          docker-compose up --build -d
          docker container ls
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.SERVICE_NAME }}
          cluster: ${{ vars.CLUSTER_NAME }}

  Upload-Artifactory:
    runs-on: ubuntu-latest
    needs: [Build, Test, Format, Security, Container]
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-mapping-artefact
          path: |
            dist
            !dist/**/*.map
          compression-level: 3
      - uses: actions/download-artifact@v4
        with:
          name: dist-mapping-artefact
      - name: Display structure of downloaded files
        run: ls -R

  Deploy:
    runs-on: ubuntu-latest
    needs: [Build, Test, Format, Security, Container, Upload-Artifactory]
    environment: Production
    defaults:
      run:
        working-directory: terraform/deploy
    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: "${{ secrets.TF_API_TOKEN }}"
      - name: Generate SSH key
        run: ssh-keygen -t rsa -b 4096 -f /home/runner/.ssh/id_rsa
      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate -no-color
      - name: Terraform Plan
        run: terraform plan -no-color -var "DOCKERHUB_USERNAME=${{secrets.DOCKERHUB_USERNAME}}" -var "DOCKERHUB_PASSWORD=${{secrets.DOCKERHUB_PASSWORD}}" -var "DOCKERHUB_REPO=${{secrets.DOCKERHUB_REPO}}" -var "TAG=${{github.sha}}"
      - name: Terraform Apply
        run: terraform apply -auto-approve -var "DOCKERHUB_USERNAME=${{secrets.DOCKERHUB_USERNAME}}" -var "DOCKERHUB_PASSWORD=${{secrets.DOCKERHUB_PASSWORD}}" -var "DOCKERHUB_REPO=${{secrets.DOCKERHUB_REPO}}" -var "TAG=${{github.sha}}"

  Deploy-Autoscalling:
    runs-on: ubuntu-latest
    needs:
      [Build, Test, Format, Security, Container, Upload-Artifactory, Deploy]
    environment: Production
    defaults:
      run:
        working-directory: terraform/autoscalling
    env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      AWS_REGION: us-east-1
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: "${{ secrets.TF_API_TOKEN }}"
      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        run: terraform plan -no-color -var "DOCKERHUB_USERNAME=${{secrets.DOCKERHUB_USERNAME}}" -var "DOCKERHUB_PASSWORD=${{secrets.DOCKERHUB_PASSWORD}}" -var "DOCKERHUB_REPO=${{secrets.DOCKERHUB_REPO}}" -var "TAG=${{github.sha}}"
        continue-on-error: true
      - name: Terraform Apply
        run: terraform apply -auto-approve -var "DOCKERHUB_USERNAME=${{secrets.DOCKERHUB_USERNAME}}" -var "DOCKERHUB_PASSWORD=${{secrets.DOCKERHUB_PASSWORD}}" -var "DOCKERHUB_REPO=${{secrets.DOCKERHUB_REPO}}" -var "TAG=${{github.sha}}"

  Add-Contributer-readme:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Contribute List
        uses: akhilmhdh/contributors-readme-action@v2.3.6
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
